#!/bin/bash

# Data Dolphins Setup Script
# This script sets up the development environment for the Ocean Hazard Monitoring Platform

echo "üê¨ Setting up Data Dolphins - Ocean Hazard Monitoring Platform"
echo "=============================================================="

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

echo "‚úÖ Docker and Docker Compose are installed"

# Create necessary directories
echo "üìÅ Creating necessary directories..."
mkdir -p uploads
mkdir -p logs
mkdir -p data/postgres

# Set permissions
chmod 755 uploads
chmod 755 logs
chmod 755 data

# Copy environment file if it doesn't exist
if [ ! -f .env ]; then
    echo "üìã Creating .env file from template..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Please update the .env file with your API keys and configuration"
fi

# Build and start services
echo "üî® Building Docker containers..."
docker-compose build

echo "üöÄ Starting services..."
docker-compose up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to start..."
sleep 30

# Check if services are running
echo "üîç Checking service status..."

# Check PostgreSQL
if docker-compose exec postgres pg_isready -U postgres; then
    echo "‚úÖ PostgreSQL is running"
else
    echo "‚ùå PostgreSQL is not running"
fi

# Check Redis
if docker-compose exec redis redis-cli ping; then
    echo "‚úÖ Redis is running"
else
    echo "‚ùå Redis is not running"
fi

# Check Backend API
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend API is running"
else
    echo "‚ùå Backend API is not responding"
fi

# Check Frontend
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ Frontend is running"
else
    echo "‚ùå Frontend is not responding"
fi

# Check NLP Service
if curl -f http://localhost:8001/health > /dev/null 2>&1; then
    echo "‚úÖ NLP Service is running"
else
    echo "‚ùå NLP Service is not responding"
fi

echo ""
echo "üéâ Setup complete!"
echo ""
echo "üì± Access the application:"
echo "   ‚Ä¢ Web Dashboard: http://localhost:3000"
echo "   ‚Ä¢ Backend API: http://localhost:8000"
echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
echo "   ‚Ä¢ NLP Service: http://localhost:8001"
echo ""
echo "üì± Mobile App:"
echo "   ‚Ä¢ Run 'cd mobile && npm install' to install dependencies"
echo "   ‚Ä¢ Run 'cd mobile && npm start' to start the mobile app"
echo ""
echo "üîß Useful commands:"
echo "   ‚Ä¢ View logs: docker-compose logs -f"
echo "   ‚Ä¢ Stop services: docker-compose down"
echo "   ‚Ä¢ Restart services: docker-compose restart"
echo "   ‚Ä¢ Update services: docker-compose pull && docker-compose up -d"
echo ""
echo "‚ö†Ô∏è  Remember to:"
echo "   1. Update the .env file with your API keys"
echo "   2. Configure social media API credentials"
echo "   3. Set up INCOIS integration credentials"
echo "   4. Configure notification services"